<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Sam Kristoff</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://samkristoff.com/"/>
  <updated>2017-07-16T18:54:48.593Z</updated>
  <id>http://samkristoff.com/</id>
  
  <author>
    <name>Sam Kristoff</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Adding Custom Icon to Font Awesome</title>
    <link href="http://samkristoff.com/2017/07/16/font-awesome-hackster-logo/"/>
    <id>http://samkristoff.com/2017/07/16/font-awesome-hackster-logo/</id>
    <published>2017-07-16T15:51:11.000Z</published>
    <updated>2017-07-16T18:54:48.593Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/07/16/font-awesome-hackster-logo/hackster-logo.png" alt="Hackster Logo" title="Hackster Logo">
<p>I updated the ‘follow’ buttons on <a href="my website">samkristoff.com</a> this morning and noticed that <a href="http://fontawesome.io/" target="_blank" rel="external">Font Awesome</a>, does not have a <a href="https://www.hackster.io" target="_blank" rel="external">Hackster.io</a> icon.  I opened a <a href="https://github.com/FortAwesome/Font-Awesome/issues/11298" target="_blank" rel="external">github issue</a> requesting the new icon, but I need the icon now.</p>
<h3 id="Acquiring-Source-Images"><a href="#Acquiring-Source-Images" class="headerlink" title="Acquiring Source Images"></a>Acquiring Source Images</h3><p>I noticed two Hackster logos on my <a href="https://www.hackster.io/samkristoff" target="_blank" rel="external">profile page</a> - the round one in the upper left and the square ‘favicon’.  </p>
<img src="/2017/07/16/font-awesome-hackster-logo/hackster-potential-icons.png" alt="Potential Hackster Icons" title="Potential Hackster Icons">
<p>The round one is easy to grab, just right click and <strong>Save Image As</strong>.  The favicon is a little more tricky, but using the Chrome Developer tools it’s easy to find.  Right click anywhere in the page and choose <strong>Inspect</strong>.  Make sure the  <strong>Elements</strong>  tab is active, then press <strong>Ctrl+F</strong> and search for ‘favicon’ and you’ll quickly find the image url.  Paste the url in a new tab and you can save a copy of the square icon as well.</p>
<h3 id="PNG-to-SVG"><a href="#PNG-to-SVG" class="headerlink" title="PNG to SVG"></a>PNG to SVG</h3><p>Both images are .png’s and the round icon has some extra text.  We need clean .svg’s for the next step so <a href="https://www.getpaint.net/" target="_blank" rel="external">paint.net</a> (or your editor of choice) to crop out the ‘hackster.io’ text from the round image.  Next import the first .png into <a href="https://inkscape.org/en/" target="_blank" rel="external">inkscape</a> by dragging it into a new Inkscape window.  Make sure the icon is selected and choose <strong>Path&gt;&gt;Trace Bitmap</strong>.  Under <strong>Multiple Scans</strong> choose <strong>Colors</strong> and set <strong>Scans</strong> to 2.  Click <strong>OK</strong> to generate the vector version of the logo then change the <strong>Fill</strong> to <strong>#444444FF</strong>.</p>
<img src="/2017/07/16/font-awesome-hackster-logo/inkscape-trace-bitmap.png" alt="Inkscape - Trace Bitmap" title="Inkscape - Trace Bitmap">
<p><em>In the end the circle logo was a bit too small so I cut went with the ‘H’ without the circle and it looked much better’</em></p>
<h3 id="Generate-a-Custom-Font-Awesome-Library"><a href="#Generate-a-Custom-Font-Awesome-Library" class="headerlink" title="Generate a Custom Font Awesome Library"></a>Generate a Custom Font Awesome Library</h3><img src="/2017/07/16/font-awesome-hackster-logo/icomoon-custom-font-awesome.png" alt="Inkscape - Icomoon Custom Font Awesome Library" title="Inkscape - Icomoon Custom Font Awesome Library">
<p>Launch the <a href="https://icomoon.io/app" target="_blank" rel="external">Icomoon App</a> to customize the Font Awesome library.  Choose <strong>Add Icons From Library</strong> and select <strong>Font Awesome</strong>.  Click the hamburger menu in the upper right, choose <strong>Import to Set</strong>, and select your new .svg.  Click <strong>Generate Font</strong> in the lower right and download the new custom Font Awesome library.  Extract the .zip and rename all the files in <strong>/font</strong> to <strong>fontawesome-webfont</strong>, leaving the extensions unaltered.  Convert the .woff to a .woff2 using your <a href="https://everythingfonts.com/woff-to-woff2" target="_blank" rel="external">tool</a> of choice and add the .woff2 to the <strong>/font</strong> folder.</p>
<p>We need to add css for the new icon.  On the Icomoon download page, hover over the new icon and click <strong>Get Code</strong>.  Copy the <strong>CSS</strong> and change ‘.icon-‘ to ‘.fa’.  Paste the updated <strong>CSS</strong> it into your font-awesome.css file.  For example:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.fa-hackster</span><span class="selector-pseudo">:before</span> &#123;</div><div class="line">  <span class="attribute">content</span>: <span class="string">"\e901"</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><em>Note: If you have both font-awesome.css and font-awesome.min.css chances are the .min version is being used in your website, make sure to update both.</em></p>
<h3 id="Success"><a href="#Success" class="headerlink" title="Success!"></a>Success!</h3><p>The circle </p>
<img src="/2017/07/16/font-awesome-hackster-logo/new-hackster-icon.png" alt="Inkscape - Fancy New Hackster Icon" title="Inkscape - Fancy New Hackster Icon">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/07/16/font-awesome-hackster-logo/hackster-logo.png&quot; alt=&quot;Hackster Logo&quot; title=&quot;Hackster Logo&quot;&gt;
&lt;p&gt;I updated the ‘follow’ but
    
    </summary>
    
    
      <category term="software" scheme="http://samkristoff.com/tags/software/"/>
    
      <category term="graphics" scheme="http://samkristoff.com/tags/graphics/"/>
    
      <category term="inkscape" scheme="http://samkristoff.com/tags/inkscape/"/>
    
  </entry>
  
  <entry>
    <title>Freezer Temperature Control.</title>
    <link href="http://samkristoff.com/2017/07/11/freezer-temperature-control/"/>
    <id>http://samkristoff.com/2017/07/11/freezer-temperature-control/</id>
    <published>2017-07-12T03:00:00.000Z</published>
    <updated>2017-07-16T14:59:05.544Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/07/11/freezer-temperature-control/temperature-control.png" alt="38 Degrees" title="38 Degrees">
<p>I don’t want beer-cycles (although it might be interesting to try) so I need a way to regulate the temperature on my Keezer.  Many people use the <a target="_blank" href="https://www.amazon.com/gp/product/B011296704/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B011296704&linkCode=as2&tag=samkristoff-20&linkId=d887d015a837b61cf2144f9deb1b1019">Itc-308 Digital Temperature Controller</a> as a quick and easy way to convert a freezer into a refrigerator.  I, however, opted for a bit more DIY solution which will allow me to integrate the temperature control into the tablet user interface and have more control over the entire system.</p>
<h3 id="The-Controller"><a href="#The-Controller" class="headerlink" title="The Controller"></a>The Controller</h3><img src="/2017/07/11/freezer-temperature-control/teensy-pre-solder.jpg" alt="Teensy 3.2" title="Teensy 3.2">
<p>I decided to use a <a target="_blank" href="https://www.amazon.com/gp/product/B015M3K5NG/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B015M3K5NG&linkCode=as2&tag=samkristoff-20&linkId=40ba9b1a98676ba627857f9454fd03a3">Teensy 3.2</a> to handle all of the control signal on my Keezer.  This includes monitoring temperature, turning the freezer on and off, talking to the tablet, controlling beer flow and more.  The Teensy has plenty of I/O and processing power to keep the Keezer running.</p>
<h3 id="Temperature-Sensors"><a href="#Temperature-Sensors" class="headerlink" title="Temperature Sensors"></a>Temperature Sensors</h3><img src="/2017/07/11/freezer-temperature-control/ds18b20-temperature-probe.jpg" alt="DS18B20 Temperature Probe" title="DS18B20 Temperature Probe">
<p>Temperature changes relatively slowly over time and while I don’t want my beer getting warm, I also don’t need to know it’s exact temperature to the millidegree.  The <a target="_blank" href="https://www.amazon.com/gp/product/B01DQQPR2A/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B01DQQPR2A&linkCode=as2&tag=samkristoff-20&linkId=c1479bcef02a55085069730c91cdd5fe">ELENKER Waterproof Temperature Probe</a> can measure -10° to 85° C in about .5° C increments which is more than enough for the Keezer.  Best of all they’re inexpensive and super easy to use with Teensy!</p>
<h3 id="Power-Control"><a href="#Power-Control" class="headerlink" title="Power Control"></a>Power Control</h3><img src="/2017/07/11/freezer-temperature-control/powerswitch-tail.jpg" alt="DS18B20 PowerSwitch Tail II" title="DS18B20 PowerSwitch Tail II">
<p>Although they’re getting hard to find the <a target="_blank" href="https://www.amazon.com/gp/product/B00B888VHM/ref=as_li_tl?ie=UTF8&camp=1789&creative=9325&creativeASIN=B00B888VHM&linkCode=as2&tag=samkristoff-20&linkId=1df647d959134c8c05da3f4793851483">PowerSwitch Tail II</a> is still my favorite relay for ‘wall power’ devices.  No cutting cables or external circuitry required, just plug the freezer (or device of your choice) into one end and the other end into the wall, then turn the device on and off by toggling a low voltage digital output.  Simple and safe if not the most cost effective.</p>
<h3 id="Bringing-It-All-Together"><a href="#Bringing-It-All-Together" class="headerlink" title="Bringing It All Together"></a>Bringing It All Together</h3><p><a href="http://bfy.tw/CqWR" target="_blank" rel="external">Apparently</a> the optimal beer keg temperature is 38° F.  I don’t want the freezer compressor turning on and off too often so I’m going to shoot for 37-39° F.  The example code below reads from the temperature sensor and turns the freezer on if the temperature is above the high set point (39° F) or turns the freezer off if the temperature is below the low set point (37° F). </p>
<figure class="highlight c++"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;OneWire.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="comment">//Configuration</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> TEMP_PROBE_CHAN 10</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> MAIN_TEMP_PROBE_ADDR 0x28FFD723A01646E0</span></div><div class="line"></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> COOL_CHAN 13</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KEEZER_TEMP_MAX 39</span></div><div class="line"><span class="meta">#<span class="meta-keyword">define</span> KEEZER_TEMP_MIN 37</span></div><div class="line"></div><div class="line"><span class="comment">//Global Variables</span></div><div class="line"><span class="comment">//Initialize oneWire on DIO 10 to read from DS18B20 temperature sensors</span></div><div class="line"><span class="function">OneWire <span class="title">ow</span><span class="params">(TEMP_PROBE_CHAN)</span></span>;</div><div class="line">byte mainTempProbeAddr[<span class="number">8</span>] = &#123;<span class="number">0x28</span>, <span class="number">0xFF</span>, <span class="number">0xD7</span>, <span class="number">0x23</span>, <span class="number">0xA0</span>, <span class="number">0x16</span>, <span class="number">0x04</span>, <span class="number">0x6E</span>&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">setup</span><span class="params">()</span> </span>&#123;</div><div class="line">  Serial.begin(<span class="number">9600</span>);</div><div class="line">  </div><div class="line">  <span class="comment">//Set PowerSwitch Tail DIO pin as output.</span></div><div class="line">  pinMode(COOL_CHAN, OUTPUT);</div><div class="line"></div><div class="line">  <span class="comment">//Print all OneWire device addresses</span></div><div class="line">  printOneWireDeviceAddresses();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">loop</span><span class="params">()</span> </span>&#123;  </div><div class="line">  <span class="keyword">float</span> temp = readTempProbe(mainTempProbeAddr);</div><div class="line">  <span class="comment">//Check to make sure temp is valid (If temp read fails it will return -1000)</span></div><div class="line">  <span class="keyword">if</span>(temp &gt; <span class="number">-1000</span>)</div><div class="line">  &#123;</div><div class="line">     updateCoolingMode(temp);    </div><div class="line">  &#125; </div><div class="line">  delay(<span class="number">1000</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Read temperature from the DS18B20</span></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">readTempProbe</span><span class="params">(byte* address)</span></span></div><div class="line">&#123;  </div><div class="line">  <span class="comment">//Initialize communication</span></div><div class="line">  ow.reset();</div><div class="line">  ow.select(address);</div><div class="line">  ow.write(<span class="number">0x44</span>, <span class="number">1</span>);</div><div class="line">  delay(<span class="number">1000</span>); </div><div class="line">  ow.reset(); </div><div class="line">  ow.select(address);    </div><div class="line">  ow.write(<span class="number">0xBE</span>);  </div><div class="line"></div><div class="line">  <span class="comment">//Read Data</span></div><div class="line">  byte data[<span class="number">12</span>];</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++) &#123;</div><div class="line">    data[i] = ow.read();   </div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="keyword">if</span>(ow.crc8(data, <span class="number">8</span>) != data[<span class="number">8</span>])</div><div class="line">  &#123;</div><div class="line">    Serial.println(<span class="string">"Failed CRC"</span>);</div><div class="line">    <span class="keyword">return</span> <span class="number">-1000</span>;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="comment">//Convert data to temp</span></div><div class="line">  <span class="keyword">int16_t</span> raw = (data[<span class="number">1</span>] &lt;&lt; <span class="number">8</span>) | data[<span class="number">0</span>];  </div><div class="line">  <span class="keyword">float</span> celsius = (<span class="keyword">float</span>)raw / <span class="number">16.0</span>;</div><div class="line">  <span class="keyword">float</span> fahrenheit = celsius * <span class="number">1.8</span> + <span class="number">32.0</span>; </div><div class="line">  Serial.print(fahrenheit);</div><div class="line">  Serial.println(<span class="string">" F"</span>);</div><div class="line">  <span class="keyword">return</span> fahrenheit;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Update the refridgeration state based on the specified current temperature in F.  This function returns true when cooling is enabled and false otherwise.</span></div><div class="line"><span class="function"><span class="keyword">bool</span> <span class="title">updateCoolingMode</span><span class="params">(<span class="keyword">float</span> tempF)</span></span></div><div class="line">&#123;</div><div class="line">  <span class="comment">//Display Freezer Mode</span></div><div class="line">  <span class="keyword">if</span> (tempF &gt; KEEZER_TEMP_MAX)</div><div class="line">  &#123;</div><div class="line">    Serial.println(<span class="string">"Keezer Cooling"</span>);</div><div class="line">    digitalWrite(COOL_CHAN, HIGH);</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (tempF &lt; KEEZER_TEMP_MIN)</div><div class="line">  &#123;</div><div class="line">    Serial.println(<span class="string">"Keezer Idle"</span>);</div><div class="line">    digitalWrite(COOL_CHAN, LOW);</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//Print All OneWire devices addresses on the bus.</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">printOneWireDeviceAddresses</span><span class="params">()</span></span></div><div class="line">&#123;</div><div class="line">  byte addr[<span class="number">8</span>];</div><div class="line">  <span class="keyword">while</span>(ow.search(addr)) </div><div class="line">  &#123;</div><div class="line">    Serial.print(<span class="string">"Address - 0x"</span>);</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">8</span>; i++) </div><div class="line">    &#123;   </div><div class="line">      <span class="keyword">if</span>(addr[i] &gt; <span class="number">0xF</span>) &#123;</div><div class="line">        Serial.print(addr[i], HEX);  </div><div class="line">      &#125;</div><div class="line">      <span class="keyword">else</span> &#123;</div><div class="line">        Serial.print(<span class="string">"0"</span>);  </div><div class="line">        Serial.print(addr[i], HEX);  </div><div class="line">      &#125;      </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  Serial.println();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Based on <a href="https://www.pjrc.com/teensy/td_libs_OneWire.html" target="_blank" rel="external">the example</a> from PJRC.</p>
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/07/11/freezer-temperature-control/temperature-control.png&quot; alt=&quot;38 Degrees&quot; title=&quot;38 Degrees&quot;&gt;
&lt;p&gt;I don’t want beer-cycles 
    
    </summary>
    
    
      <category term="kegerator" scheme="http://samkristoff.com/tags/kegerator/"/>
    
      <category term="keezer" scheme="http://samkristoff.com/tags/keezer/"/>
    
      <category term="beer" scheme="http://samkristoff.com/tags/beer/"/>
    
  </entry>
  
  <entry>
    <title>Kegerator -vs- Keezer</title>
    <link href="http://samkristoff.com/2017/07/05/kegerator-vs-keezer/"/>
    <id>http://samkristoff.com/2017/07/05/kegerator-vs-keezer/</id>
    <published>2017-07-06T03:00:00.000Z</published>
    <updated>2017-07-16T14:59:09.371Z</updated>
    
    <content type="html"><![CDATA[<img src="/2017/07/05/kegerator-vs-keezer/keezer-vs-kegerator.png" alt="Kegerator -vs- Keezerc" title="Kegerator -vs- Keezerc">
<p>DIY beer machines typically fall into two main categories:</p>
<p><strong>Kegerator</strong><br><em>A small refrigerator designed or adapted to hold a keg from which cold beer can be dispensed.</em></p>
<p><strong>Keezer </strong><br> <em>A small freezer converted into a refrigerator designed or adapted to hold a keg from which cold beer can be dispensed.</em></p>
<h3 id="Why-a-Keezer"><a href="#Why-a-Keezer" class="headerlink" title="Why a Keezer"></a>Why a Keezer</h3><p>After looking at a bunch of mini-fridge options I decided to go with the Keezer design for two reasons:</p>
<ul>
<li>I want a touch screen user interface for my beer machine.  A sub $200 mini fridge can barely hold 2 corny kegs and I want 4 to prove that the touch UI works and is useful.</li>
<li>I found an almost new freezer on craigs list for $80.</li>
</ul>
<p>I ended up with a Haier 7.1 cu ft chest freezer.  It can easily hold 3 corny kegs plus all the Co2 gear and I may just barely be able to get a 4th corny keg in.  If not I’ll probably grab a 2.5 gallon keg to sit on the ‘shelf’.</p>
<img src="/2017/07/05/kegerator-vs-keezer/haier-7.1-cu-ft-outer.jpg" alt="Freezer outside." title="Freezer outside.">
<img src="/2017/07/05/kegerator-vs-keezer/haier-7.1-cu-ft-inner.jpg" alt="Freezer inside." title="Freezer inside.">
]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2017/07/05/kegerator-vs-keezer/keezer-vs-kegerator.png&quot; alt=&quot;Kegerator -vs- Keezerc&quot; title=&quot;Kegerator -vs- Keezerc&quot;&gt;
&lt;p&gt;DIY beer 
    
    </summary>
    
    
      <category term="kegerator" scheme="http://samkristoff.com/tags/kegerator/"/>
    
      <category term="keezer" scheme="http://samkristoff.com/tags/keezer/"/>
    
      <category term="beer" scheme="http://samkristoff.com/tags/beer/"/>
    
  </entry>
  
  <entry>
    <title>The Magic of the Keezer</title>
    <link href="http://samkristoff.com/2017/07/01/the-magic-of-the-keezer/"/>
    <id>http://samkristoff.com/2017/07/01/the-magic-of-the-keezer/</id>
    <published>2017-07-01T15:00:00.000Z</published>
    <updated>2017-07-16T14:59:33.747Z</updated>
    
    <content type="html"><![CDATA[<p>A big part of my day job as an engineer is understanding how things work.  Being able to look at the latest Wi-Fi connected thing-a-matron and infer the general hardware and software architecture is very useful, but a lot of the magic is gone.  New projects tend to be more development work than exciting exploration.  This really is a good thing.  Every year I look back and think ‘Wow, I didn’t know anything last year, but now I do!’ (at least until next year).  Unfortunately, the gains in productivity were at the cost of wonderment.</p>
<img src="/2017/07/01/the-magic-of-the-keezer/magic-electronic-components.png" alt="Any sufficiently advanced technology is indistinguishable from magic" title="Any sufficiently advanced technology is indistinguishable from magic">
<p>I was describing some very basic electronic components (buttons, potentiometers, thermistors, etc.) to an intern the other day and I was incredibly jealous seeing the excitement on his face.  That was me 10 years ago.  I probably would have traded brains with him on the spot if it was an option.  I want that back.</p>
<p>In college whenever I was struggling with some complex multivariable calculus problem my friend Duc would come over and say ‘Well, it’s just math!’.  To him it was ‘just math’.  Trivial.  To me it felt like the plans to build the sun from scratch written in the Klingon equivalent of pig-Latin.  Lately my hobby projects have been pure software projects and have become ‘just software’.  Trivial.  More work than fun.</p>
<img src="/2017/07/01/the-magic-of-the-keezer/the-sun.png" alt="It's just math!" title="It's just math!">
<p>Enter the Keezer!</p>
<p>The idea to build a keezer (keg + freezer) came while chatting with a neighbor (and drinking beer).  It sounded like the ideal project.  Plenty of new territory to explore with the Co2 system, refrigeration, pumps, valves, etc. and ample opportunity to make it my own with a touch screen UI, cloud data logging and just maybe - a driver seat. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;A big part of my day job as an engineer is understanding how things work.  Being able to look at the latest Wi-Fi connected thing-a-matro
    
    </summary>
    
    
      <category term="keezer" scheme="http://samkristoff.com/tags/keezer/"/>
    
      <category term="beer" scheme="http://samkristoff.com/tags/beer/"/>
    
  </entry>
  
</feed>
