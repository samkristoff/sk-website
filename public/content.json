{"meta":{"title":"Sam Kristoff","subtitle":null,"description":null,"author":"Sam Kristoff","url":"http://samkristoff.com"},"pages":[{"title":"About","date":"2017-07-02T03:00:00.000Z","updated":"2017-07-16T15:25:25.177Z","comments":true,"path":"about/index.html","permalink":"http://samkristoff.com/about/index.html","excerpt":"","text":"I’m a computer engineer and maker located in Seattle, WA. I started ‘making’ at six years old, building bird houses with my father. My love of making quickly turned toward electronics, software, and automation which lead me to attend the University of Minnesota where I earned a bachelor’s degree in Computer Engineering and worked as a research assistant at the Center for Distributed Robotics. After graduating I joined National Instruments as part of the Engineering Leadership Program and spent time as a LabVIEW Embedded product support engineer, and a systems engineer in the academic group. I’m currently an engineering manager at Digilent. I’m also the founder of LabVIEW MakerHub. I’m always interested to hear about opportunities to collaborate: samkristoff.com@gmail.com"}],"posts":[{"title":"Adding Custom Icon to Font Awesome","slug":"font-awesome-hackster-logo","date":"2017-07-16T15:51:11.000Z","updated":"2017-07-16T18:54:48.593Z","comments":true,"path":"2017/07/16/font-awesome-hackster-logo/","link":"","permalink":"http://samkristoff.com/2017/07/16/font-awesome-hackster-logo/","excerpt":"","text":"I updated the ‘follow’ buttons on samkristoff.com this morning and noticed that Font Awesome, does not have a Hackster.io icon. I opened a github issue requesting the new icon, but I need the icon now. Acquiring Source ImagesI noticed two Hackster logos on my profile page - the round one in the upper left and the square ‘favicon’. The round one is easy to grab, just right click and Save Image As. The favicon is a little more tricky, but using the Chrome Developer tools it’s easy to find. Right click anywhere in the page and choose Inspect. Make sure the Elements tab is active, then press Ctrl+F and search for ‘favicon’ and you’ll quickly find the image url. Paste the url in a new tab and you can save a copy of the square icon as well. PNG to SVGBoth images are .png’s and the round icon has some extra text. We need clean .svg’s for the next step so paint.net (or your editor of choice) to crop out the ‘hackster.io’ text from the round image. Next import the first .png into inkscape by dragging it into a new Inkscape window. Make sure the icon is selected and choose Path&gt;&gt;Trace Bitmap. Under Multiple Scans choose Colors and set Scans to 2. Click OK to generate the vector version of the logo then change the Fill to #444444FF. In the end the circle logo was a bit too small so I cut went with the ‘H’ without the circle and it looked much better’ Generate a Custom Font Awesome Library Launch the Icomoon App to customize the Font Awesome library. Choose Add Icons From Library and select Font Awesome. Click the hamburger menu in the upper right, choose Import to Set, and select your new .svg. Click Generate Font in the lower right and download the new custom Font Awesome library. Extract the .zip and rename all the files in /font to fontawesome-webfont, leaving the extensions unaltered. Convert the .woff to a .woff2 using your tool of choice and add the .woff2 to the /font folder. We need to add css for the new icon. On the Icomoon download page, hover over the new icon and click Get Code. Copy the CSS and change ‘.icon-‘ to ‘.fa’. Paste the updated CSS it into your font-awesome.css file. For example: 123.fa-hackster:before &#123; content: \"\\e901\";&#125; Note: If you have both font-awesome.css and font-awesome.min.css chances are the .min version is being used in your website, make sure to update both. Success!The circle","categories":[],"tags":[{"name":"software","slug":"software","permalink":"http://samkristoff.com/tags/software/"},{"name":"graphics","slug":"graphics","permalink":"http://samkristoff.com/tags/graphics/"},{"name":"inkscape","slug":"inkscape","permalink":"http://samkristoff.com/tags/inkscape/"}]},{"title":"Freezer Temperature Control.","slug":"freezer-temperature-control","date":"2017-07-12T03:00:00.000Z","updated":"2017-07-16T14:59:05.544Z","comments":true,"path":"2017/07/11/freezer-temperature-control/","link":"","permalink":"http://samkristoff.com/2017/07/11/freezer-temperature-control/","excerpt":"","text":"I don’t want beer-cycles (although it might be interesting to try) so I need a way to regulate the temperature on my Keezer. Many people use the Itc-308 Digital Temperature Controller as a quick and easy way to convert a freezer into a refrigerator. I, however, opted for a bit more DIY solution which will allow me to integrate the temperature control into the tablet user interface and have more control over the entire system. The Controller I decided to use a Teensy 3.2 to handle all of the control signal on my Keezer. This includes monitoring temperature, turning the freezer on and off, talking to the tablet, controlling beer flow and more. The Teensy has plenty of I/O and processing power to keep the Keezer running. Temperature Sensors Temperature changes relatively slowly over time and while I don’t want my beer getting warm, I also don’t need to know it’s exact temperature to the millidegree. The ELENKER Waterproof Temperature Probe can measure -10° to 85° C in about .5° C increments which is more than enough for the Keezer. Best of all they’re inexpensive and super easy to use with Teensy! Power Control Although they’re getting hard to find the PowerSwitch Tail II is still my favorite relay for ‘wall power’ devices. No cutting cables or external circuitry required, just plug the freezer (or device of your choice) into one end and the other end into the wall, then turn the device on and off by toggling a low voltage digital output. Simple and safe if not the most cost effective. Bringing It All TogetherApparently the optimal beer keg temperature is 38° F. I don’t want the freezer compressor turning on and off too often so I’m going to shoot for 37-39° F. The example code below reads from the temperature sensor and turns the freezer on if the temperature is above the high set point (39° F) or turns the freezer off if the temperature is below the low set point (37° F). 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107#include &lt;OneWire.h&gt;//Configuration#define TEMP_PROBE_CHAN 10#define MAIN_TEMP_PROBE_ADDR 0x28FFD723A01646E0#define COOL_CHAN 13#define KEEZER_TEMP_MAX 39#define KEEZER_TEMP_MIN 37//Global Variables//Initialize oneWire on DIO 10 to read from DS18B20 temperature sensorsOneWire ow(TEMP_PROBE_CHAN);byte mainTempProbeAddr[8] = &#123;0x28, 0xFF, 0xD7, 0x23, 0xA0, 0x16, 0x04, 0x6E&#125;;void setup() &#123; Serial.begin(9600); //Set PowerSwitch Tail DIO pin as output. pinMode(COOL_CHAN, OUTPUT); //Print all OneWire device addresses printOneWireDeviceAddresses();&#125;void loop() &#123; float temp = readTempProbe(mainTempProbeAddr); //Check to make sure temp is valid (If temp read fails it will return -1000) if(temp &gt; -1000) &#123; updateCoolingMode(temp); &#125; delay(1000);&#125;//Read temperature from the DS18B20float readTempProbe(byte* address)&#123; //Initialize communication ow.reset(); ow.select(address); ow.write(0x44, 1); delay(1000); ow.reset(); ow.select(address); ow.write(0xBE); //Read Data byte data[12]; for(int i = 0; i &lt; 9; i++) &#123; data[i] = ow.read(); &#125; if(ow.crc8(data, 8) != data[8]) &#123; Serial.println(\"Failed CRC\"); return -1000; &#125; //Convert data to temp int16_t raw = (data[1] &lt;&lt; 8) | data[0]; float celsius = (float)raw / 16.0; float fahrenheit = celsius * 1.8 + 32.0; Serial.print(fahrenheit); Serial.println(\" F\"); return fahrenheit;&#125;//Update the refridgeration state based on the specified current temperature in F. This function returns true when cooling is enabled and false otherwise.bool updateCoolingMode(float tempF)&#123; //Display Freezer Mode if (tempF &gt; KEEZER_TEMP_MAX) &#123; Serial.println(\"Keezer Cooling\"); digitalWrite(COOL_CHAN, HIGH); return true; &#125; else if (tempF &lt; KEEZER_TEMP_MIN) &#123; Serial.println(\"Keezer Idle\"); digitalWrite(COOL_CHAN, LOW); return false; &#125; return false;&#125;//Print All OneWire devices addresses on the bus.void printOneWireDeviceAddresses()&#123; byte addr[8]; while(ow.search(addr)) &#123; Serial.print(\"Address - 0x\"); for (int i = 0; i &lt; 8; i++) &#123; if(addr[i] &gt; 0xF) &#123; Serial.print(addr[i], HEX); &#125; else &#123; Serial.print(\"0\"); Serial.print(addr[i], HEX); &#125; &#125; &#125; Serial.println();&#125; Based on the example from PJRC.","categories":[],"tags":[{"name":"kegerator","slug":"kegerator","permalink":"http://samkristoff.com/tags/kegerator/"},{"name":"keezer","slug":"keezer","permalink":"http://samkristoff.com/tags/keezer/"},{"name":"beer","slug":"beer","permalink":"http://samkristoff.com/tags/beer/"}]},{"title":"Kegerator -vs- Keezer","slug":"kegerator-vs-keezer","date":"2017-07-06T03:00:00.000Z","updated":"2017-07-16T14:59:09.371Z","comments":true,"path":"2017/07/05/kegerator-vs-keezer/","link":"","permalink":"http://samkristoff.com/2017/07/05/kegerator-vs-keezer/","excerpt":"","text":"DIY beer machines typically fall into two main categories: KegeratorA small refrigerator designed or adapted to hold a keg from which cold beer can be dispensed. Keezer A small freezer converted into a refrigerator designed or adapted to hold a keg from which cold beer can be dispensed. Why a KeezerAfter looking at a bunch of mini-fridge options I decided to go with the Keezer design for two reasons: I want a touch screen user interface for my beer machine. A sub $200 mini fridge can barely hold 2 corny kegs and I want 4 to prove that the touch UI works and is useful. I found an almost new freezer on craigs list for $80. I ended up with a Haier 7.1 cu ft chest freezer. It can easily hold 3 corny kegs plus all the Co2 gear and I may just barely be able to get a 4th corny keg in. If not I’ll probably grab a 2.5 gallon keg to sit on the ‘shelf’.","categories":[],"tags":[{"name":"kegerator","slug":"kegerator","permalink":"http://samkristoff.com/tags/kegerator/"},{"name":"keezer","slug":"keezer","permalink":"http://samkristoff.com/tags/keezer/"},{"name":"beer","slug":"beer","permalink":"http://samkristoff.com/tags/beer/"}]},{"title":"The Magic of the Keezer","slug":"the-magic-of-the-keezer","date":"2017-07-01T15:00:00.000Z","updated":"2017-07-16T14:59:33.747Z","comments":true,"path":"2017/07/01/the-magic-of-the-keezer/","link":"","permalink":"http://samkristoff.com/2017/07/01/the-magic-of-the-keezer/","excerpt":"","text":"A big part of my day job as an engineer is understanding how things work. Being able to look at the latest Wi-Fi connected thing-a-matron and infer the general hardware and software architecture is very useful, but a lot of the magic is gone. New projects tend to be more development work than exciting exploration. This really is a good thing. Every year I look back and think ‘Wow, I didn’t know anything last year, but now I do!’ (at least until next year). Unfortunately, the gains in productivity were at the cost of wonderment. I was describing some very basic electronic components (buttons, potentiometers, thermistors, etc.) to an intern the other day and I was incredibly jealous seeing the excitement on his face. That was me 10 years ago. I probably would have traded brains with him on the spot if it was an option. I want that back. In college whenever I was struggling with some complex multivariable calculus problem my friend Duc would come over and say ‘Well, it’s just math!’. To him it was ‘just math’. Trivial. To me it felt like the plans to build the sun from scratch written in the Klingon equivalent of pig-Latin. Lately my hobby projects have been pure software projects and have become ‘just software’. Trivial. More work than fun. Enter the Keezer! The idea to build a keezer (keg + freezer) came while chatting with a neighbor (and drinking beer). It sounded like the ideal project. Plenty of new territory to explore with the Co2 system, refrigeration, pumps, valves, etc. and ample opportunity to make it my own with a touch screen UI, cloud data logging and just maybe - a driver seat.","categories":[],"tags":[{"name":"keezer","slug":"keezer","permalink":"http://samkristoff.com/tags/keezer/"},{"name":"beer","slug":"beer","permalink":"http://samkristoff.com/tags/beer/"}]}]}